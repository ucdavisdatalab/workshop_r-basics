{
  "hash": "ce1bb46cacde9e16abfc7d3c83b16a5c",
  "result": {
    "engine": "knitr",
    "markdown": "# Getting Started\n\n:::{.callout-note}\n##### Learning Goals\n\nAfter completing this chapter, learners should be able to:\n\n* Run code in the R console\n* Call functions and create variables\n* Check (in)equality of values\n* Describe a file system, directory, and working directory\n* Write paths to files or directories\n* Get or set the R working directory\n* Identify RDS, CSV, TSV files and functions for reading these\n* Inspect the structure of a data frame\n:::\n\nR is a program for statistical computing. It provides a rich set of built-in\ntools for cleaning, exploring, modeling, and visualizing data.\n\nThe main way you'll interact with R is by writing code or **expressions** in\nthe R programming language. Most people use \"R\" as a blanket term to refer to\nboth the program and the programming language. Usually, the distinction doesn't\nmatter, but in cases where it does, we'll point it out and be specific.\n\nBy writing code, you create an unambiguous record of every step taken in an\nanalysis. This it one of the major advantages of R (and other programming\nlanguages) over point-and-click software like Tableau and Microsoft Excel.\nCode you write in R is **reproducible**: you can share it with someone else,\nand if they run it with the same inputs, they'll get the same results.\n\nAnother advantage of writing code is that it's often **reusable**. This can\nmean automating a repetitive task within a single analysis, recycling code from\none analysis into another, or **packaging** useful code for distribution to the\ngeneral public. At the time of writing, there were over 17,000 user-contributed\npackages available for R, spanning a broad range of disciplines.\n\nR is one of many programming languages used in data science. Compared to other\nprogramming languages, R's particular strengths are its interactivity, built-in\nsupport for handling missing data, the ease with which you can produce\nhigh-quality data visualizations, and its broad base of user-contributed\npackages (due to both its age and growing popularity).\n\n\nPrerequisites\n-------------\n\n![](/images/rlogo.png){height=5em fig-align=\"center\"}\n\nYou can download R for free [here](https://cloud.r-project.org/), and can find\nan install guide [here]().\n\nIn addition to R, you'll need RStudio. RStudio is an **integrated development\nenvironment** (IDE), which means it's a comprehensive program for writing,\nediting, searching, and running code. You can do all of these things without\nRStudio, but RStudio makes the process easier. You can download RStudio Desktop\nOpen-Source Edition for free\n[here](https://www.rstudio.com/products/rstudio/download/), and can find an\ninstall guide [here]().\n\n\nThe R Interface\n---------------\n\nThe first time you open RStudio, you'll see a window divided into several\npanes, like this:\n\n![\n  How RStudio typically looks the first time you open it. Don't worry if the\n  text in the panes isn't exactly the same on your computer: it depends on your\n  operating system and versions of R and RStudio.\n](/images/rstudio_start.png){.lightbox}\n\nThe console\npane, on the left, is the main interface to R. If you type R code into the\nconsole and press the `Enter` key on your keyboard, R will run your code and\nreturn the result.\n\nOn the right are the environment pane and the plots pane. The environment pane\nshows data in your R workspace. The plots pane shows any plots you make, and\nalso has tabs to browse your file system and to view R's built-in help files.\nYou'll learn more about these gradually, but for now, focus on the console\npane.\n\nLet's start by using R to do some arithmetic. In the console, you'll see that\nthe cursor is on a line that begins with `>`, called the *prompt*. You can make\nR compute the sum $2 + 2$ by typing the code `2 + 2` after the prompt and then\npressing the `Enter` key. Your code and the result from R should look like\nthis:\n\n![](/images/arithmetic.png)\n\nR always puts the result on a separate line (or lines) from your code. In this\ncase, the result begins with the tag `[1]`, which is a hint from R that the\nresult is a **vector** and that this line starts with the **element** at\nposition 1. You'll learn more about vectors in @sec-vectors, and eventually\nlearn about other data types that are displayed differently. The result of the\nsum, `4`, is displayed after the tag. In this reader, results from R will\nusually be typeset in monospace and further prefixed with `##` to indicate that\nthey aren't code.\n\nIf you enter an incomplete expression, R will change the prompt to `+`, then\nwait for you to type the rest of the expression and press the `Enter` key.\nHere's what it looks like if you only enter `2 +`:\n\n![](/images/incomplete.png)\n\nYou can finish entering the expression, or you can cancel it by pressing the\n`Esc` key (or `Ctrl-c` if you're using R without RStudio). R can only tell an\nexpression is incomplete if it's missing something, like the second operand in\n`2 +`. So if you mean to enter `2 + 2` but accidentally enter `2`, which is a\ncomplete expression by itself, don't expect R to read your mind and wait for\nmore input!\n\nTry out some other arithmetic in the R console. Besides `+` for addition, the\nother arithmetic operators are:\n\n* `-` for subtraction\n* `*` for multiplication\n* `/` for division\n* `%%` for remainder division (modulo)\n* `^` or `**` for exponentiation\n\nYou can combine these and use parentheses to make more complicated expressions,\njust as you would when writing a mathematical expression. When R computes a\nresult, it follows the standard order of operations: parentheses,\nexponentiation, multiplication, division, addition, and finally subtraction.\nFor example, to estimate the area of a circle with radius 3, you can write:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3.14 * 3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.26\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can write R expressions with any number of spaces (including none) around\nthe operators and R will still compute the result. Nevertheless, putting spaces\nin your code makes it easier for you and others to read, so it's good to make\nit a habit. Put spaces around most operators, after commas, and after keywords.\n\n\n### Variables\n\nSince R is designed for mathematics and statistics, you might expect that it\nprovides a better appoximation for $\\pi$ than `3.14`. R and most other\nprogramming languages allow you to create named values, or **variables**. R\nprovides a built-in variable called `pi` for the value of $\\pi$. You can\ndisplay a variable's value by entering its name in the console:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can also use variables in expressions. For instance, here's a more precise\nexpression for the area of a circle with radius 3:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi * 3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.27433\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can define your own variables with the assignment operator `=` or `<-`. In\nmost circumstances these two operators are interchangeable. For clarity, it's\nbest to choose one you like and use it consistently in all of your R code. In\nthis reader, we use `=` for assignment because this is the assignment operator\nin most programming languages.\n\nThe main reason to use variables is to save results so that you can use them\non other expressions later. For example, to save the area of the circle in a\nvariable called `area`, you can write:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea = pi * 3^2\n```\n:::\n\n\n\n\n\n\nIn R, variable names can contain any combination of letters, numbers, dots `.`,\nand underscores `_`, but must always start with a letter or a dot. Spaces and\nother symbols are not allowed in variable names.\n\nNow you can use the `area` variable anywhere you want the computed area. Notice\nthat when you assign a result to a variable, R doesn't automatically display\nthat result. If you want to see the result as well, you have to enter the\nvariable's name as a separate expression:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.27433\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAnother reason to use variables is to make an expression more general. For\ninstance, you might want to compute the area of several circles with different\nradii. Then the expression `pi * 3^2` is too specific. You can rewrite it as\n`pi * r^2`, and then assign a value to the variable `r` just before you compute\nthe area. Here's the code to compute and display the area of a circle with\nradius 1 this way:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr = 1\narea = pi * r^2\narea\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNow if you want to compute the area for a different radius, all you have to do\nis change `r` and run the code again (R will not change `area` until you do\nthis). Writing code that's general enough to reuse across multiple problems can\nbe a big time-saver in the long run. Later on, you'll learn ways to make this\ncode even easier to reuse.\n\n### Strings\n\nR treats anything inside single or double quotes as literal text rather than as\nan expression to evaluate. In programming jargon, a piece of literal text is\ncalled a **string**. You can use whichever kind of quotes you prefer, but the\nquote at the beginning of the string must match the quote at the end.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n'Hi'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hi\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"Hello!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello!\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNumbers and strings are not the same thing, so for example R considers `1`\ndifferent from `\"1\"`. As a result, you can't use strings with most of R's\narithmetic operators. For instance, this code causes an error:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"1\" + 3\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"1\" + 3: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe error message notes that `+` is not defined for non-numeric values.\n\n\n### Comparisons {#sec-comparisons}\n\nBesides arithmetic, you can also use R to compare values. The comparison\noperators are:\n\n* `<` for \"less than\"\n* `>` for \"greater than\"\n* `<=` for \"less than or equal to\"\n* `>=` for \"greater than or equal to\"\n* `==` for \"equal to\"\n* `!=` for \"not equal to\"\n\nThe \"equal to\" operator uses two equal signs so that R can distinguish it from\n`=`, the assignment operator.\n\nLet's look at a few examples:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1.5 < 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"a\" > \"b\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\npi == 3.14\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"hi\" == 'hi'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWhen you make a comparison, R returns a **logical** value, `TRUE` or `FALSE`,\nto indicate the result. Logical values are not the same as strings, so they are\nnot quoted.\n\nLogical values are values, so you can use them in other computations. For\nexample:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nTRUE == FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n@sec-logic describes more ways to use and combine logical values.\n\nBeware that the equality operators don't always return `FALSE` when you compare\ntwo different types of data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"1\" == 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"TRUE\" <= TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"FALSE\" <= TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n@sec-implicit-coercion explains why this happens, and\n@sec-more-about-comparisons explains several other ways to compare values.\n\n\n### Calling Functions {#sec-calling-functions}\n\nMost of R's features are provided through **functions**, pieces of reusable\ncode. You can think of a function as a machine that takes some inputs and uses\nthem to produce some output. In programming jargon, the inputs to a function\nare called **arguments**, the output is called the **return value**, and when\nyou use a function, you're **calling** the function.\n\nTo call a function, write its name followed by parentheses. Put any arguments\nto the function inside the parentheses. For example, in R, the sine function is\nnamed `sin` (there are also `cos` and `tan`). So you can compute the sine of\n$\\pi / 4$ with this code:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsin(pi / 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7071068\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere are many functions that accept more than one argument. For instance, the\n`sum` function accepts any number of arguments and adds them all together. When\nyou call a function with multiple arguments, separate the arguments with\ncommas. So another way to compute $2 + 2$ in R is:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWhen you call a function, R assigns each argument to a **parameter**.\nParameters are special variables that represent the inputs to a function and\nonly exist while that function runs. For example, the `log` function, which\ncomputes a logarithm, has parameters `x` and `base` for the operand and base of\nthe logarithm, respectively. The next section, @sec-getting-help, explains how\nto look up the parameters for a function.\n\nBy default, R assigns arguments to parameters based on their order. The first\nargument is assigned to the function's first parameter, the second to the\nsecond, and so on. So you can compute the logarithm of 64, base 2, with this\ncode:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(64, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe argument 64 is assigned to the parameter `x`, and the argument 2 is\nassigned to the parameter `base`. You can also assign arguments to parameters\nby name with `=` (not `<-`), overriding their positions. So some other ways you\ncould write the call above are:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(64, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(x = 64, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(base = 2, x = 64)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(base = 2, 64)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAll of these are equivalent. When you write code, choose whatever seems the\nclearest to you. Leaving parameter names out of calls saves typing, but\nincluding some or all of them can make the code easier to understand.\n\nParameters are not regular variables, and only exist while their associated\nfunction runs. You can't set them before a call, nor can you access them after\na call. So this code causes an error:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 64\nlog(base = 2)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): argument \"x\" is missing, with no default\n```\n\n\n:::\n:::\n\n\n\n\n\n\nIn the error message, R says that you forgot to assign an argument to the\nparameter `x`. You can keep the variable `x` and correct the call by making `x`\nan argument (for the parameter `x`):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n\n\nOr, written more explicitly:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x = x, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n\n\nIn summary, variables and parameters are distinct, even if they happen to have\nthe same name. The variable `x` is not the same thing as the parameter `x`.\n\n\n## Getting Help {#sec-getting-help}\n\nLearning and using a language is hard, so it's important to know how to get\nhelp. The first place to look for help is R's built-in documentation. In the\nconsole, you can access a specific help page by name with `?` followed by the\nname of the page.\n\nThere are help pages for all of R's built-in functions, usually with the same\nname as the function itself. So the code to open the help page for the `log`\nfunction is:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?log\n```\n:::\n\n\n\n\n\n\nFor functions, help pages usually include a brief description, a list of\nparameters, a description of the return value, and some examples.\n\nThere are also help pages for other topics, such as built-in mathematical\nconstants (such as `?pi`), data sets (such as `?iris`), and operators. To look\nup the help page for an operator, put the operator's name in single or double\nquotes. For example, this code opens the help page for the arithmetic\noperators:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?\"+\"\n```\n:::\n\n\n\n\n\n\nIt's always okay to put quotes around the name of the page when you use `?`,\nbut they're only required if it contains non-alphabetic characters. So `?sqrt`,\n`?'sqrt'`, and `?\"sqrt\"` all open the documentation for `sqrt`, the square root\nfunction.\n\nSometimes you might not know the name of the help page you want to look up. You\ncan do a general search of R's help pages with `??` followed by a string of\nsearch terms. For example, to get a list of all help pages related to linear\nmodels:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??\"linear model\"\n```\n:::\n\n\n\n\n\n\nThis search function doesn't always work well, and it's often more efficient to\nuse an online search engine. When you search for help with R online, include\n\"R\" as a search term. Alternatively, you can use [RSeek][rseek], which\nrestricts the search to a selection of R-related websites.\n\n[rseek]: https://rseek.org/\n\n\n### When Something Goes Wrong\n\nAs a programmer, sooner or later you'll run some code and get an error message\nor result you didn't expect. Don't panic! Even experienced programmers make\nmistakes regularly, so learning how to diagnose and fix problems is vital.\n\nTry going through these steps:\n\n1. If R returned a warning or error message, read it! If you're not sure what\n   the message means, try searching for it online.\n2. Check your code for typographical errors, including incorrect capitalization\n   and missing or extra commas, quotes, and parentheses.\n3. Test your code one line at a time, starting from the beginning. After each\n   line that assigns a variable, check that the value of the variable is what\n   you expect. Try to determine the exact line where the problem originates\n   (which may differ from the line that emits an error!).\n\nIf none of these steps help, try asking online. [Stack Overflow][stacko] is a\npopular question and answer website for programmers. Before posting, make sure\nto read about [how to ask a good question][goodq].\n\n[stacko]: https://stackoverflow.com/\n[goodq]: https://stackoverflow.com/help/how-to-ask\n\n\n\nFile Systems\n------------\n\nMost of the time, you won't just write code directly into the R console.\nReproducibility and reusability are important benefits of R over\npoint-and-click software, and in order to realize these, you have to save your\ncode to your computer's hard drive. Let's start by reviewing how files on a\ncomputer work. You'll need to understand that before you can save your code,\nand it will also be important later on for loading data sets.\n\nYour computer's **file system** is a collection of **files** (chunks of data)\nand **directories** (or \"folders\") that organize those files. For instance, the\nfile system on a computer shared by [Ada][ada] and [Charles][chuck], two\npioneers of computing, might look like this:\n\n[ada]: https://en.wikipedia.org/wiki/Ada_Lovelace\n[chuck]: https://en.wikipedia.org/wiki/Charles_Babbage\n\n![\n  A typical file system. Don't worry if your file system looks a bit different\n  from the picture.\n](/images/filesystem.png){width=50%}\n\nFile systems have a tree-like structure, with a top-level directory called the\n**root directory**. On Ada and Charles' computer, the root is called `/`, which\nis also what it's called on all macOS and Linux computers. On Windows, the root\nis usually called `C:/`, but sometimes other letters, like `D:/`, are also used\ndepending on the computer's hardware.\n\nA **path** is a list of directories that leads to a specific file or directory\non a file system (imagine giving directons to someone as they walk through the\nfile system). Use forward slashes `/` to separate the directories in a path.\nThe root directory includes a forward slash as part of its name, and doesn't\nneed an extra one.\n\nFor example, suppose Ada wants to write a path to the file `cats.csv`. She can\nwrite the path like this:\n\n```\n/Users/ada/cats.csv\n```\n\nYou can read this path from left-to-right as, \"Starting from the root\ndirectory, go to the `Users` directory, then from there go to the `ada`\ndirectory, and from there go to the file `cats.csv`.\" Alternatively, you can\nread the path from right-to-left as, \"The file `cats.csv` inside of the `ada`\ndirectory, which is inside of the `Users` directory, which is in the root\ndirectory.\"\n\nAs another example, suppose Charles wants a path to the `Programs` directory.\nHe can write:\n\n```\n/Programs/\n```\n\nThe `/` at the end of this path is reminder that `Programs` is a directory, not\na file. Charles could also write the path like this:\n\n```\n/Programs\n```\n\nThis is still correct, but it's not as obvious that `Programs` is a directory.\nIn other words, when a path leads to a directory, including a **trailing\nslash** is optional, but makes the meaning of the path clearer. Paths that lead\nto files never have a trailing slash.\n\nOn Windows computers, paths are usually written with backslashes ```\\``` to\nseparate directories instead of forward slashes. Fortunately, R uses forward\nslashes `/` for all paths, regardless of the operating system. So when you're\nworking in R, use forward slashes and don't worry about the operating system.\nThis is especially convenient when you want to share code with someone that\nuses a different operating system than you.\n\n### Absolute & Relative Paths {#sec-absolute-relative-paths}\n\nA path that starts from the root directory, like all of the ones you've seen so\nfar, is called an **absolute path**. The path is \"absolute\" because it\nunambiguously describes where a file or directory is located. The downside is\nthat absolute paths usually don't work well if you share your code.\n\nFor example, suppose Ada uses the path `/Programs/ada/cats.csv` to load the\n`cats.csv` file in her code. If she shares her code with another pioneer of\ncomputing, say [Gladys][gladys], who also has a copy of `cats.csv`, it might\nnot work. Even though Gladys has the file, she might not have it in a directory\ncalled `ada`, and might not even have a directory called `ada` on her computer.\nBecause Ada used an absolute path, her code works on her own computer, but\nisn't portable to others.\n\n[gladys]: https://en.wikipedia.org/wiki/Gladys_West\n\nOn the other hand, a **relative path** is one that doesn't start from the root\ndirectory. The path is \"relative\" to an unspecified starting point, which\nusually depends on the context.\n\nFor instance, suppose Ada's code is saved in the file `analysis.R` (more about\n`.R` files in @sec-r-scripts), which is in the same directory as `cats.csv` on\nher computer. Then instead of an absolute path, she can use a relative path in\nher code:\n\n```\ncats.csv\n```\n\nThe context is the location of `analysis.R`, the file that contains the code.\nIn other words, the starting point on Ada's computer is the `ada` directory. On\nother computers, the starting point will be different, depending on where the\ncode is stored.\n\nNow suppose Ada sends her corrected code in `analysis.R` to Gladys, and tells\nGladys to put it in the same directory as `cats.csv`. Since the path `cats.csv`\nis relative, the code will still work on Gladys' computer, as long as the two\nfiles are in the same directory. The name of that directory and its location in\nthe file system don't matter, and don't have to be the same as on Ada's\ncomputer. Gladys can put the files in a directory `/Users/gladys/from_ada/` and\nthe path (and code) will still work.\n\nRelative paths can include directories. For example, suppose that Charles wants\nto write a relative path from the `Users` directory to a cool selfie he took.\nThen he can write:\n\n```\ncharles/cool_hair_selfie.jpg\n```\n\nYou can read this path as, \"Starting from wherever you are, go to the `charles`\ndirectory, and from there go to the `cool_hair_selfie.jpg` file.\" In other\nwords, the relative path depends on the context of the code or program that\nuses it.\n\nWhen use you paths in R code, they should almost always be relative paths. This\nensures that the code is portable to other computers, which is an important\naspect of reproducibility. Another benefit is that relative paths tend to be\nshorter, making your code easier to read (and write).\n\nWhen you write paths, there are three shortcuts you can use. These are most\nuseful in relative paths, but also work in absolute paths:\n\n* `.` means the current directory.\n* `..` means the directory above the current directory.\n* `~` means the **home directory**. Each user has their own home directory,\n  whose location depends on the operating system and their username. Home\n  directories are typically found inside `C:/Users/` on Windows, `/Users/` on\n  macOS, and `/home/` on Linux.\n\nAs an example, suppose Ada wants to write a (relative) path from the `ada`\ndirectory to Charles' cool selfie. Using these shorcuts, she can write:\n\n```\n../charles/cool_hair_selfie.jpg\n```\n\nRead this as, \"Starting from wherever you are, go up one directory, then go to\nthe `charles` directory, and then go to the `cool_hair_selfie.jpg` file.\" Since\n`/Users/ada` is Ada's home directory, she could also write the path as:\n\n```\n~/../charles/cool_hair_selfie.jpg\n```\n\nThis path has the same effect, but the meaning is slightly different. You can\nread it as \"Starting from your home directory, go up one directory, then go to\nthe `charles` directory, and then go to the `cool_hair_selfie.jpg` file.\"\n\nThe `..` and `~` shortcut are frequently used and worth remembering. The `.`\nshortcut is included here in case you see it in someone else's code. Since it\nmeans the current directory, a path like `./cats.csv` is identical to\n`cats.csv`, and the latter is preferable for being simpler. There are a few\nspecific situations where `.` is necessary, but they fall outside the scope of\nthis text.\n\n\n### R Scripts {#sec-r-scripts}\n\nNow that you know how file systems and paths work, you're ready to learn how to\nsave your R code to a file. R code is usually saved into an **R script**\n(extension `.R`) or an **R Markdown file** (extension `.Rmd`). R scripts are\nslightly simpler, so let's focus on those.\n\nIn RStudio, you can create a new R script with this menu option:\n\n```\nFile -> New File -> R Script\n```\n\nThis will open a new pane in RStudio, like this:\n\n![\n  How RStudio typically looks after opening a new R Script.\n](/images/rstudio_script.png)\n\nThe new pane is the scripts pane, which displays all of the R scripts you're\nediting. Each script appears in a separate tab. In the screenshot, only one\nscript, the new script, is open.\n\nEditing a script is similar to editing any other text document. You can write,\ndelete, copy, cut, and paste text. You can also save the file to your\ncomputer's file system. When you do, pay attention to where you save the file,\nas you might need it later.\n\nThe contents of an R script should be R code. Anything else you want to write\nin the script (notes, documentation, etc.) should be in a **comment**. In R,\ncomments begin with `#` and extend to the end of the line:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a comment.\n```\n:::\n\n\n\n\n\n\nR will ignore comments when you run your code.\n\nWhen you start a new project, it's a good idea to create a specific directory\nfor all of the project's files. If you're using R, you should also create one\nor more R scripts in that directory. As you work, write your code directly into\na script. Arrange your code in the order of the steps to solve the problem,\neven if you write some parts before others. Comment out or delete any lines of\ncode that you try but ultimately decide you don't need. Make sure to save the\nfile periodically so that you don't lose your work. Following these guidelines\nwill help you stay organized and make it easier to share your code with others\nlater.\n\nWhile editing, you can run the current line in the R console by pressing\n`Ctrl`+`Enter` on Windows and Linux, or `Cmd`+`Enter` on macOS. This way you\ncan test and correct your code as you write it.\n\nIf you want, you can instead run (or **source**) the entire R script, by\ncalling the `source` function with the path to the script as an argument. This\nis also what the \"Source on Save\" check box refers to in RStudio. The code runs\nin\norder, only stopping if an error occurs.\n\nFor instance, if you save the script as `my_cool_script.R`, then you can run\n`source(\"my_cool_script.R\")` in the console to run the entire script (pay\nattention to the path---it may be different on your computer).\n\nR Markdown files are an alternative format for storing R code. They provide a\nricher set of formatting options, and are usually a better choice than R\nscripts if you're writing a report that contains code. You can learn more\nabout R Markdown files [here][rmd].\n\n[rmd]: https://rmarkdown.rstudio.com/\n\n\n### The Working Directory\n\n@sec-absolute-relative-paths explained that relative paths have a starting\npoint that depends on the context where the path is used. Let's make that idea\nmore concrete for R. The **working directory** is the starting point R uses for\nrelative paths. Think of the working directory as the directory R is currently\n\"at\" or watching.\n\nThe function `getwd` returns the absolute path for the current working\ndirectory, as a string. It doesn't require any arguments:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/home/nick/mill/datalab/teaching/r_basics\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nOn your computer, the output from `getwd` will likely be different. This is a\nvery useful function for getting your bearings when you write relative paths.\nIf you write a relative path and it doesn't work as expected, the first thing\nto do is check the working directory.\n\nThe related `setwd` function changes the working directory. It takes one\nargument: a path to the new working directory. Here's an example:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"..\")\n\n# Now check the working directory.\ngetwd()\n```\n:::\n\n\n\n\n\n\nGenerally, you should avoid using calls to `setwd` in your R scripts and R\nMarkdown files. Calling `setwd` makes your code more difficult to understand,\nand can always be avoided by using appropriate relative paths. If you call\n`setwd` with an absolute path, it also makes your code less portable to other\ncomputers. It's fine to use `setwd` interactively (in the R console), but avoid\nmaking your saved code dependent on it.\n\nAnother function that's useful for dealing with the working directory and file\nsystem is `list.files`. The `list.files` function returns the names of all of\nthe files and directories inside of a directory. It accepts a path to a\ndirectory as an argument, or assumes the working directory if you don't pass a\npath. For instance:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List files and directories in /home/.\nlist.files(\"/home/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"lost+found\" \"nick\"      \n```\n\n\n:::\n\n```{.r .cell-code}\n# List files and directories in the working directory.\nlist.files()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"_freeze\"     \"_quarto.yml\" \"assessment\"  \"chapters\"    \"cover.png\"  \n [6] \"data\"        \"docs\"        \"images\"      \"index.html\"  \"index.qmd\"  \n[11] \"LICENSE\"     \"notes\"       \"R\"           \"raw\"         \"README.md\"  \n[16] \"site_libs\"  \n```\n\n\n:::\n:::\n\n\n\n\n\n\nAs usual, since you have a different computer, you're likely to see different\noutput if you run this code. If you call `list.files` with an invalid path or\nan empty directory, the output is `character(0)`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"/this/path/is/fake/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n\n\n\n\nLater on, you'll learn about what `character(0)` means more generally.\n\n\nReading Files\n-------------\n\nAnalyzing data sets is one of the most common things to do in R. The first step\nis to get R to read your data. Data sets come in a variety of file formats, and\nyou need to identify the format in order to tell R how to read the data.\n\nMost of the time, you can guess the format of a file by looking at its\n**extension**, the characters (usually three) after the last dot `.` in the\nfilename. For example, the extension `.jpg` or `.jpeg` indicates a [JPEG image\nfile][jpg]. Some operating systems hide extensions by default, but you can find\ninstructions to change this setting online by searching for \"show file\nextensions\" and your operating system's name. The extension is just part of the\nfile's name, so it should be taken as a hint about the file's format rather\nthan a guarantee.\n\n[jpg]: https://en.wikipedia.org/wiki/JPEG\n\nR has built-in functions for reading a variety of formats. The R community also\nprovides **packages**, shareable and reusable pieces of code, to read even more\nformats. You'll learn more about packages later, in @sec-packages. For now,\nlet's focus on data sets that can be read with R's built-in functions.\n\nHere are several formats that are frequently used to distribute data, along\nwith the name of a built-in function or contributed package that can read the\nformat:\n\n| Name                        | Extension  | Function or Package | Tabular?  | Text?\n| :-------------------------- | :--------  | :------------------ | :-------- | :----\n| Comma-separated Values      | `.csv`     | `read.csv`          | Yes       | Yes\n| Tab-separated Values        | `.tsv`     | `read.delim`        | Yes       | Yes\n| Fixed-width File            | `.fwf`     | `read.fwf`          | Yes       | Yes\n| Microsoft Excel             | `.xlsx`    | readr package       | Yes       | No\n| Microsoft Excel 1993-2007   | `.xls`     | readr package       | Yes       | No\n| [Apache Arrow][arrow]       | `.feather` | arrow package       | Yes       | No\n| R Data                      | `.rds`     | `readRDS`           | Sometimes | No\n| R Data                      | `.rda`     | `load`              | Sometimes | No\n| Plaintext                   | `.txt`     | `readLines`         | Sometimes | Yes\n| Extensible Markup Language  | `.xml`     | xml2 package        | No        | Yes\n| JavaScript Object Notation  | `.json`    | jsonlite package    | No        | Yes\n\n[arrow]: https://arrow.apache.org/\n\nA **tabular** data set is one that's structured as a table, with rows and\ncolumns. This reader focuses on tabular data sets, since they're common in\npractice and present the fewest programming challenges. Here's an example of a\ntabular data set:\n\n| Fruit  | Quantity | Price\n| :----  | -------: | ----:\n| apple  | 32       | 1.49\n| banana | 541      | 0.79\n| pear   | 10       | 1.99\n\nA **text file** is a file that contains human-readable lines of text. You can\ncheck this by opening the file with a text editor such as Microsoft Notepad or\nmacOS TextEdit. Many file formats use text in order to make the format easier\nto work with.\n\nFor instance, a **comma-separated values** (CSV) file records a tabular data\nusing one line per row, with commas separating columns. If you store the table\nabove in a CSV file and open the file in a text editor, here's what you'll see:\n\n```\nFruit,Quantity,Price\napple,32,1.49\nbanana,541,0.79\npear,10,1.99\n```\n\nA **binary file** is one that's not human-readable. You can't just read off the\ndata if you open a binary file in a text editor, but they have a number of\nother advantages. Compared to text files, binary files are often faster to read\nand take up less storage space (bytes).\n\nAs an example, R's built-in binary format is called RDS (which may stand for \"R\ndata serialized\"). RDS files are extremely useful for backing up work, since\nthey can store any kind of R object, even ones that are not tabular. You can\nlearn more about how to create an RDS file on the `?saveRDS` help page, and how\nto read one on the `?readRDS` help page.\n\n\n### Hello, Data! {#sec-hello-data}\n\nLet's read our first data set! Over the next few sections, you're going to\nexplore a data set about the people who are depicted on banknotes (paper money)\nfrom around the world. [Click here to download the data set][banknotes-dl]\n(you'll need to click the \"Download raw file\" button).\n\nThe banknotes data set is derived from one created by [The Pudding][pudding], a\ndigital publication that makes awesome stories and visualizations with data.\nCheck out [their article about banknotes around the world][banknotes].\n\n[pudding]: https://pudding.cool/\n[banknotes]: https://pudding.cool/2022/04/banknotes/\n[banknotes-dl]: https://github.com/ucdavisdatalab/workshop_r_basics/blob/main/data/banknotes.csv\n\nThe data set is in a file called `banknotes.csv`, which suggests it's a CSV\nfile. In this case, the extension is correct, so you can read the file into R\nwith the built-in `read.csv` function. The first argument is the path to where\nyou saved the file, which may be different on your computer. The `read.csv`\nfunction returns the data set, but R won't keep the data in memory unless you\nassign the returned result to a variable:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbanknotes = read.csv(\"data/banknotes.csv\")\n```\n:::\n\n\n\n\n\n\nThe variable name `banknotes` here is arbitrary; you can choose something different\nif you want. However, in general, it's a good habit to choose variable names\nthat describe the contents of the variable somehow.\n\nIf you tried running the line of code above and got an error message, pay\nattention to what the error message says, and remember the strategies to get\nhelp in @sec-getting-help. The most common mistake when reading a file is\nincorrectly specifying the path, so first check that you got the path right.\n\nIf you ran the line of code and there was no error message, congratulations,\nyou've read your first data set into R!\n\n\n## Data Frames {#sec-data-frames}\n\nNow that you've loaded the data, let's take a look at it. When you're working\nwith a new data set, it's usually not a good idea to print it out directly (by\ntyping `banknotes`, in this case) until you know how big it is. Big data sets can\ntake a long time to print, and the output can be difficult to read.\n\nInstead, you can use the `head` function to print only the beginning, or head,\nof a data set. Let's take a peek:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  currency_code   country     currency_name                       name gender\n1           ARS Argentina  Argentinian Peso                  Eva Perón      F\n2           ARS Argentina  Argentinian Peso       Julio Argentino Roca      M\n3           ARS Argentina  Argentinian Peso Domingo Faustino Sarmiento      M\n4           ARS Argentina  Argentinian Peso       Juan Manuel de Rosas      M\n5           ARS Argentina  Argentinian Peso            Manuel Belgrano      M\n6           AUD Australia Australian Dollar              David Unaipon      M\n  bill_count    profession known_for_being_first current_bill_value\n1        1.0      Activist                    No                100\n2        1.0 Head of Gov't                    No                100\n3        1.0 Head of Gov't                    No                 50\n4        1.0    Politician                    No                 20\n5        1.0       Founder                   Yes                 10\n6        0.5          STEM                   Yes                 50\n  prop_total_bills first_appearance_year death_year\n1               NA                  2012       1952\n2               NA                  1988       1914\n3               NA                  1999       1888\n4               NA                  1992       1877\n5               NA                  1970       1820\n6             0.48                  1995       1967\n                                                                                                                                                             comments\n1                                                                                                                                                                    \n2                                                                                                                                                                    \n3                                                                                                                                                                    \n4                                                                                                                                                                    \n5                                                                                                                              Came up with the first Argentine flag.\n6 Shares with another person. In 1927 when his book of Aboriginal legends, Hurgarrda was published, he became the first Australian Aboriginal writer to be published.\n                                          hover_text has_portrait            id\n1                                                            true     ARS_Evita\n2                                                            true ARS_Argentino\n3                                                            true   ARS_Domingo\n4                                                            true     ARS_Rosas\n5                      Designed first Argentine flag         true  ARS_Belgrano\n6 First Australian Aboriginal writer to be published         true   AUD_Unaipon\n  scaled_bill_value\n1         1.0000000\n2         1.0000000\n3         0.4444444\n4         0.1111111\n5         0.0000000\n6         0.4736842\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis data set is tabular---as you might have already guessed, since it came\nfrom a CSV file. In R, it's represented by a **data frame**, a table with rows\nand columns. R uses data frames to represent most (but not all) kinds of\ntabular data. The `read.csv` function, which you used to read this data, always\nreturns a data frame.\n\nFor a data frame, the `head` function only prints the first six rows. If there\nare lots of columns or the columns are wide, as is the case here, R wraps the\noutput across lines.\n\nWhen you first read an object into R, you might not know whether it's a data\nframe. One way to check is visually, by printing it (as you just did with\n`head`). A better way to check is with the `class` function, which returns\ninformation about what an object is. For a data frame, the result will always\ncontain `data.frame`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou'll learn more about classes in @sec-data-types-classes, but for now you can\nuse this function to identify data frames.\n\nBy counting the columns in the output from `head(banknotes)`, you can see\nthat this data set has 17 columns. A more convenient way to\ncheck the number of columns in a data set is with the `ncol` function:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe similarly-named `nrow` function returns the number of rows:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 279\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAlternatively, you can get both numbers at the same time with the `dim` (short\nfor \"dimensions\") function.\n\nSince the columns have names, you might also want to get just these. You can do\nthat with the `names` or `colnames` functions. Both return the same result:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"currency_code\"         \"country\"               \"currency_name\"        \n [4] \"name\"                  \"gender\"                \"bill_count\"           \n [7] \"profession\"            \"known_for_being_first\" \"current_bill_value\"   \n[10] \"prop_total_bills\"      \"first_appearance_year\" \"death_year\"           \n[13] \"comments\"              \"hover_text\"            \"has_portrait\"         \n[16] \"id\"                    \"scaled_bill_value\"    \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"currency_code\"         \"country\"               \"currency_name\"        \n [4] \"name\"                  \"gender\"                \"bill_count\"           \n [7] \"profession\"            \"known_for_being_first\" \"current_bill_value\"   \n[10] \"prop_total_bills\"      \"first_appearance_year\" \"death_year\"           \n[13] \"comments\"              \"hover_text\"            \"has_portrait\"         \n[16] \"id\"                    \"scaled_bill_value\"    \n```\n\n\n:::\n:::\n\n\n\n\n\n\nIf the rows have names, you can get those with the `rownames` function. For\nthis particular data set, the rows don't have names.\n\n\n### Summarizing Data\n\nAn efficient way to get a sense of what's actually in a data set is to have R\ncompute summary information. This works especially well for data frames, but\nalso applies to other data. R provides two different functions to get\nsummaries: `str` and `summary`.\n\nThe `str` function returns a **structural summary** of an object. This kind of\nsummary tells us about the structure of the data---the number of rows, the\nnumber and names of columns, what kind of data is in each column, and some\nsample values. Here's the structural summary for the banknotes data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t279 obs. of  17 variables:\n $ currency_code        : chr  \"ARS\" \"ARS\" \"ARS\" \"ARS\" ...\n $ country              : chr  \"Argentina\" \"Argentina\" \"Argentina\" \"Argentina\" ...\n $ currency_name        : chr  \"Argentinian Peso\" \"Argentinian Peso\" \"Argentinian Peso\" \"Argentinian Peso\" ...\n $ name                 : chr  \"Eva Perón\" \"Julio Argentino Roca\" \"Domingo Faustino Sarmiento\" \"Juan Manuel de Rosas\" ...\n $ gender               : chr  \"F\" \"M\" \"M\" \"M\" ...\n $ bill_count           : num  1 1 1 1 1 0.5 0.5 0.5 0.5 0.5 ...\n $ profession           : chr  \"Activist\" \"Head of Gov't\" \"Head of Gov't\" \"Politician\" ...\n $ known_for_being_first: chr  \"No\" \"No\" \"No\" \"No\" ...\n $ current_bill_value   : int  100 100 50 20 10 50 10 20 10 50 ...\n $ prop_total_bills     : num  NA NA NA NA NA 0.48 0.08 0.1 0.08 0.48 ...\n $ first_appearance_year: int  2012 1988 1999 1992 1970 1995 1993 1994 1993 1995 ...\n $ death_year           : chr  \"1952\" \"1914\" \"1888\" \"1877\" ...\n $ comments             : chr  \"\" \"\" \"\" \"\" ...\n $ hover_text           : chr  \"\" \"\" \"\" \"\" ...\n $ has_portrait         : chr  \"true\" \"true\" \"true\" \"true\" ...\n $ id                   : chr  \"ARS_Evita\" \"ARS_Argentino\" \"ARS_Domingo\" \"ARS_Rosas\" ...\n $ scaled_bill_value    : num  1 1 0.444 0.111 0 ...\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis summary lists information about each column, and includes most of what you\nfound earlier by using several different functions separately. The summary uses\n`chr` to indicate columns of text (\"characters\") and `int` to indicate columns\nof integers.\n\nIn contrast to `str`, the `summary` function returns a **statistical summary**\nof an object. This summary includes summary statistics for each column,\nchoosing appropriate statistics based on the kind of data in the column. For\nnumbers, this is generally the mean, median, and quantiles. For categories,\nthis is the frequencies. Other kinds of statistics are shown for other kinds of\ndata. Here's the statistical summary for the banknotes data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(banknotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n currency_code        country          currency_name          name          \n Length:279         Length:279         Length:279         Length:279        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    gender            bill_count      profession        known_for_being_first\n Length:279         Min.   :0.2500   Length:279         Length:279           \n Class :character   1st Qu.:0.5000   Class :character   Class :character     \n Mode  :character   Median :1.0000   Mode  :character   Mode  :character     \n                    Mean   :0.8456                                           \n                    3rd Qu.:1.0000                                           \n                    Max.   :1.0000                                           \n                                                                             \n current_bill_value prop_total_bills first_appearance_year  death_year       \n Min.   :     1     Min.   :0.0100   Min.   :1869          Length:279        \n 1st Qu.:    20     1st Qu.:0.0550   1st Qu.:1980          Class :character  \n Median :   100     Median :0.1000   Median :1996          Mode  :character  \n Mean   :  4039     Mean   :0.1669   Mean   :1992                            \n 3rd Qu.:  1000     3rd Qu.:0.2300   3rd Qu.:2012                            \n Max.   :100000     Max.   :0.7500   Max.   :2021                            \n                    NA's   :220                                              \n   comments          hover_text        has_portrait            id           \n Length:279         Length:279         Length:279         Length:279        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n scaled_bill_value\n Min.   :0.00000  \n 1st Qu.:0.01828  \n Median :0.11111  \n Mean   :0.30606  \n 3rd Qu.:0.48914  \n Max.   :1.00000  \n NA's   :1        \n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Selecting Columns\n\nYou can select an individual column from a data frame by name with `$`, the\ndollar sign operator. The syntax is:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVARIABLE$COLUMN_NAME\n```\n:::\n\n\n\n\n\n\nFor instance, for the banknotes data, `banknotes$country` selects the `country`\ncolumn, and `banknotes$first_appearance_year` selects the\n`first_appearance_year` column. So one way to compute the mean of the\n`first_appearance_year` column is:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(banknotes$first_appearance_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1992.319\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSimilarly, to compute the range of the `current_bill_value` column:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(banknotes$current_bill_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]      1 100000\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can also use the dollar sign operator to assign values to columns. For\ninstance, to assign `USD` to the entire `currency_code` column:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbanknotes$currency_code = \"USD\"\n```\n:::\n\n\n\n\n\n\nBe careful when you do this, as there is no undo. Fortunately, you haven't\nsaved any transformations to the banknotes data to your computer's hard drive\nyet, so you can reset the `banknotes` variable back to what it was by reloading\nthe data set:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbanknotes = read.csv(\"data/banknotes.csv\")\n```\n:::\n\n\n\n\n\n\nIn @sec-indexing, you'll learn how to select rows and individual elements from\na data frame, as well as other ways to select columns.\n\n\nExercises\n---------\n\n### Exercise\n\nIn a string, an **escape sequence** or escape code consists of a backslash\nfollowed by one or more characters. Escape sequences make it possible to:\n\n* Write quotes or backslashes within a string\n* Write characters that don't appear on your keyboard (for example, characters\n  in a foreign language)\n\nFor example, the escape sequence `\\n` corresponds to the newline character.\nThere's a complete list of escape sequences for R in the `?Quotes` help file.\nOther programming languages also use escape sequences, and many of them are the\nsame as in R.\n\n1. Assign a string that contains a newline to the variable `newline`. Then make\n   R display the value of the variable by entering `newline` at the R prompt.\n2. The `message` function prints output to the R console, so it's one way you\n   can make your R code report information as it runs. Use the `message`\n   function to print `newline`.\n3. How does the output from part 1 compare to the output from part 2? Why do\n   you think they differ?\n\n\n### Exercise\n\n1. Choose a directory on your computer that you're familiar with, such as one\n   you created. Determine the path to the directory, then use `list.files` to\n   display its contents. Do the files displayed match what you see in your\n   system's file browser?\n\n2. What does the `all.files` parameter of `list.files` do? Give an example.\n\n\n### Exercise\n\nThe `read.table` function is another function for reading tabular data. Take a\nlook at the help file for `read.table`. Recall that `read.csv` reads tabular\ndata where the values are separated by commas, and `read.delim` reads tabular\ndata where the values are separated by tabs.\n\n1. What value-separator does `read.table` expect by default?\n2. Is it possible to use `read.table` to read a CSV? Explain. If your answer is\n   yes, show how to use `read.table` to load the banknotes data\n   from @sec-hello-data.\n",
    "supporting": [
      "01_getting-started_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}